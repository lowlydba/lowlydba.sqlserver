---
- name: Var block
  vars:
    ag_name: "IntAG1"
    cluster_type: "None"
    failover_mode: "Manual"
    dtc_support_enabled: false
    availability_mode: "AsynchronousCommit"
    seeding_mode: "Automatic"
    database_health_trigger: true
    use_last_backup: false
    healthcheck_timeout: 15000
    basic_availability_group: false
    force: false
    failure_condition_level: "OnServerDown"
    database: "ag-test-db"
  module_defaults:
    lowlydba.sqlserver.availability_group:
      sql_instance: "{{ sqlserver_instance }}"
      sql_username: "{{ sqlserver_username }}"
      sql_password: "{{ sqlserver_password }}"
      ag_name: "{{ ag_name }}"
      cluster_type: "{{ cluster_type }}"
      failover_mode: "{{ failover_mode }}"
      dtc_support_enabled: "{{ dtc_support_enabled }}"
      availability_mode: "{{ availability_mode }}"
      seeding_mode: "{{ seeding_mode }}"
      database_health_trigger: "{{ database_health_trigger }}"
      database: "{{ database }}"
      healthcheck_timeout: "{{ healthcheck_timeout }}"
      basic_availability_group: "{{ basic_availability_group }}"
      force: "{{ force }}"
      allow_null_backup: true
      failure_condition_level: "{{ failure_condition_level }}"
    lowlydba.sqlserver.database:
      sql_instance: "{{ sqlserver_instance }}"
      sql_username: "{{ sqlserver_username }}"
      sql_password: "{{ sqlserver_password }}"
  tags: ["availability_group"]
  block:
    - name: Enable hadr
      lowlydba.sqlserver.hadr:
        sql_instance: "{{ sqlserver_instance }}"
        sql_username: "{{ sqlserver_username }}"
        sql_password: "{{ sqlserver_password }}"
        enabled: true
        force: true

    - name: Create a database
      lowlydba.sqlserver.database:
        database: "{{ database }}"

    - name: Create availability group
      lowlydba.sqlserver.availability_group:
      register: result
    - assert:
        that:
          - result.data.ComputerName != None
          - result.data.InstanceName != None
          - result.data.SqlInstance != None
          - result.data.AvailabilityGroup == "{{ ag_name }}"
          - result.data.ClusterType == "{{ cluster_type }}"
          - result.data.DtcSupportEnabled is false
          - result.data.AvailabilityReplicas != None
          - result is changed

    - name: Change availability group
      lowlydba.sqlserver.availability_group:
        dtc_support_enabled: true
        all_ags: true
        failure_condition_level: "OnServerUnresponsive"
      register: result
    - assert:
        that:
          - result.data.ComputerName != None
          - result.data.InstanceName != None
          - result.data.SqlInstance != None
          - result.data.AvailabilityGroup == "{{ ag_name }}"
          - result.data.ClusterType == "{{ cluster_type }}"
          - result.data.DtcSupportEnabled is true
          - result.data.AvailabilityReplicas != None
          - result is changed

    - name: Drop availability group in check mode
      lowlydba.sqlserver.availability_group:
        state: absent
      check_mode: true
      register: result
    - assert:
        that:
          - result is changed

    - name: Drop availability group
      lowlydba.sqlserver.availability_group:
        state: absent
      register: result
    - assert:
        that:
          - result is changed

    - name: Create Contained availability group
      lowlydba.sqlserver.availability_group:
        contained_availability_group: true
        ag_name: "contained-ag"
        database: "{{ omit }}"

    - name: Drop contained availability group
      lowlydba.sqlserver.availability_group:
        state: absent
        ag_name: "contained-ag"
      register: result
    - assert:
        that:
          - result is changed

  always:
    - name: Drop availability group
      lowlydba.sqlserver.availability_group:
        state: absent

    - name: Drop contained availability group
      lowlydba.sqlserver.availability_group:
        state: absent
        ag_name: "contained-ag"

    - name: Drop database
      lowlydba.sqlserver.database:
        database: "{{ database }}"
        state: absent
