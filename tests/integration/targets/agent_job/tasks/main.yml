---
- name: Var block
  vars:
    category_name: "Integration Tests"
    job_name: "Integration Job"
    description: "This test is not a test."
    enabled: true
  module_defaults:
    lowlydba.sqlserver.agent_job:
      sql_instance: "{{ sqlserver_instance }}"
      sql_username: "{{ sqlserver_username }}"
      sql_password: "{{ sqlserver_password }}"
      category: "{{ category_name }}"
      job: "{{ job_name }}"
      description: "{{ description }}"
      force: true
      enabled: "{{ enabled }}"
    lowlydba.sqlserver.agent_job_step:
      sql_instance: "{{ sqlserver_instance }}"
      sql_username: "{{ sqlserver_username }}"
      sql_password: "{{ sqlserver_password }}"
    lowlydba.sqlserver.agent_job_category:
      sql_instance: "{{ sqlserver_instance }}"
      sql_username: "{{ sqlserver_username }}"
      sql_password: "{{ sqlserver_password }}"
  tags: ["agent_job"]
  block:
    # SQL Agent / SMO has delays on returning new data sometimes, and is worse on CI runners -
    # so explicitly pre-create the category to make sure we get timely & accurate results later
    - name: Prep agent job category
      lowlydba.sqlserver.agent_job_category:
        category: "{{ category_name }}"

    - name: Create agent job
      lowlydba.sqlserver.agent_job:
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Category == category_name
          - result.data.Enabled is true
          - result.data.Name == job_name
          - result.data.OwnerLoginName == sqlserver_username
          - result.data.HasSchedule is false

    - name: Create agent job step one
      lowlydba.sqlserver.agent_job_step:
        job: "{{ job_name }}"
        step_name: "Step 1"
        step_id: 1

    - name: Create agent job step two
      lowlydba.sqlserver.agent_job_step:
        job: "{{ job_name }}"
        step_name: "Step 2"
        step_id: 2

    - name: Set start job step id
      lowlydba.sqlserver.agent_job:
        job: "{{ job_name }}"
        start_step_id: 2
      register: result
    - assert:
        that:
          - result.data != None
          - result is changed

    - name: No change
      lowlydba.sqlserver.agent_job:
        job: "{{ job_name }}"
        start_step_id: 2
      register: result
    - assert:
        that:
          - result is not changed

    - name: Remove agent job
      lowlydba.sqlserver.agent_job:
        state: "absent"
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.ComputerName != None
          - result.data.InstanceName != None
          - result.data.SqlInstance != None
          - result.data.Status == "Dropped"

    - name: Create new agent job
      lowlydba.sqlserver.agent_job:
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Category == category_name
          - result.data.Enabled is true
          - result.data.OwnerLoginName == sqlserver_username
          - result.data.HasSchedule is false
          - result is changed

    - name: Change agent job
      lowlydba.sqlserver.agent_job:
        owner_login: "sa"
        enabled: false
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Category == category_name
          - result.data.Enabled is false
          - result.data.Name == job_name
          - result.data.OwnerLoginName == "sa"
          - result.data.HasSchedule is false
          - result is changed

    - name: Change agent job
      lowlydba.sqlserver.agent_job:
        enabled: true
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Category == category_name
          - result.data.Enabled is true
          - result.data.Name == job_name
          - result is changed

    - name: Set initial output file
      lowlydba.sqlserver.agent_job:
        output_file: 'C:\SQLJobLogs\job1.txt'
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.OutputFileInfo != None
          - result.data.OutputFileInfo.OutputFile == 'C:\SQLJobLogs\job1.txt'
          - result is changed

    - name: Set same output file again (idempotency check)
      lowlydba.sqlserver.agent_job:
        output_file: 'C:\SQLJobLogs\job1.txt'
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.OutputFileInfo != None
          - result.data.OutputFileInfo.OutputFile == 'C:\SQLJobLogs\job1.txt'
          - result is not changed

    - name: Change to different output file
      lowlydba.sqlserver.agent_job:
        output_file: 'C:\SQLJobLogs\job1_new.txt'
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.OutputFileInfo != None
          - result.data.OutputFileInfo.OutputFile == 'C:\SQLJobLogs\job1_new.txt'
          - result is changed

  always:
    - name: Cleanup agent job
      lowlydba.sqlserver.agent_job:
        state: "absent"

    - name: Cleanup agent job category
      lowlydba.sqlserver.agent_job_category:
        category: "{{ category_name }}"
        state: absent
