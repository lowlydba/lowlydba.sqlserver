---
- name: Var block
  vars:
    category_name: "Integration Tests"
    job_name: "Ansible Integration Job Step Test"
    job_step1: "One, you're like a dream come true"
    job_step2: "Two, just wanna be with you"
    job_step3: "Three, girl, it's plain to see"
  module_defaults:
    lowlydba.sqlserver.agent_job:
      sql_instance: "{{ sqlserver_instance }}"
      sql_username: "{{ sqlserver_username }}"
      sql_password: "{{ sqlserver_password }}"
    lowlydba.sqlserver.agent_job_step:
      sql_instance: "{{ sqlserver_instance }}"
      sql_username: "{{ sqlserver_username }}"
      sql_password: "{{ sqlserver_password }}"
      job: "{{ job_name }}"
  tags: ["agent_job_step"]
  block:
    - name: Create agent job
      lowlydba.sqlserver.agent_job:
        job: "{{ job_name }}"
        force: true
      register: result
    - assert:
        that:
          - result.data.Name == job_name

    - name: Create agent job step one
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step1 }}"
        step_id: 1
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Name == job_step1
          - result.data.ID == 1
          - result.data.DatabaseName == "master"
          - result.data.State == "Existing"
          - result is changed

    - name: Create agent job step two in checkmode
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step2 }}"
        step_id: 2
      check_mode: true
      register: result
    - assert:
        that:
          - result is changed

    - name: Verify create agent job step two in checkmode works
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step2 }}"
        step_id: 2
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Name == job_step2
          - result.data.ID == 2
          - result.data.DatabaseName == "master"
          - result.data.State == "Existing"
          - result is changed

    - name: Create agent job step three
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step3 }}"
        step_id: 3
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Name == job_step3
          - result.data.ID == 3
          - result.data.DatabaseName == "master"
          - result.data.State == "Existing"

    - name: Create duplicate agent job step
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step3 }}"
        step_id: 4
      register: result
      failed_when: result is not failed
    - assert:
        that:
          - result is not changed

    - name: Change agent job step in checkmode
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step3 }}"
        step_id: 3
        database: "model"
      check_mode: true
      register: result
    - assert:
        that:
          - result is changed

    - name: Verify change agent job step in checkmode works
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step3 }}"
        step_id: 3
        database: "model"
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Name == job_step3
          - result.data.ID == 3
          - result.data.DatabaseName == "model"
          - result.data.State == "Existing"
          - result is changed

    - name: Verify no change works
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step3 }}"
        step_id: 3
        database: "model"
      register: result
    - assert:
        that:
          - result.data != None
          - result.data.Name == job_step3
          - result.data.ID == 3
          - result.data.DatabaseName == "model"
          - result.data.State == "Existing"
          - result is not changed

    - name: Remove agent job step
      lowlydba.sqlserver.agent_job_step:
        step_name: "{{ job_step1 }}"
        state: "absent"
      register: result
    - assert:
        that:
          - result is changed

    - name: Remove agent job step in checkmode
      lowlydba.sqlserver.agent_job_step:
        step_id: 2
        state: "absent"
      check_mode: true
      register: result
    - assert:
        that:
          - result is changed

    - name: Verify remove agent job step in checkmode works
      lowlydba.sqlserver.agent_job_step:
        step_id: 2
        state: "absent"
      register: result
    - assert:
        that:
          - result is changed

  always:
    - name: Cleanup agent job
      lowlydba.sqlserver.agent_job:
        job: "{{ job_name }}"
        state: "absent"
      register: result
    - assert:
        that: result.data.Status == "Dropped"
